#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hazzik.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="uwow")]
	public partial class UWoWDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDBItem(DBItem instance);
    partial void UpdateDBItem(DBItem instance);
    partial void DeleteDBItem(DBItem instance);
    partial void InsertDBItemTemplate(DBItemTemplate instance);
    partial void UpdateDBItemTemplate(DBItemTemplate instance);
    partial void DeleteDBItemTemplate(DBItemTemplate instance);
    partial void InsertDBCharacter(DBCharacter instance);
    partial void UpdateDBCharacter(DBCharacter instance);
    partial void DeleteDBCharacter(DBCharacter instance);
    partial void InsertDBItemInventory(DBItemInventory instance);
    partial void UpdateDBItemInventory(DBItemInventory instance);
    partial void DeleteDBItemInventory(DBItemInventory instance);
    partial void InsertDBCharacterInventory(DBCharacterInventory instance);
    partial void UpdateDBCharacterInventory(DBCharacterInventory instance);
    partial void DeleteDBCharacterInventory(DBCharacterInventory instance);
    partial void InsertDBAuctionHouse(DBAuctionHouse instance);
    partial void UpdateDBAuctionHouse(DBAuctionHouse instance);
    partial void DeleteDBAuctionHouse(DBAuctionHouse instance);
    partial void InsertDBAuctionItem(DBAuctionItem instance);
    partial void UpdateDBAuctionItem(DBAuctionItem instance);
    partial void DeleteDBAuctionItem(DBAuctionItem instance);
    partial void InsertDBAuctionBid(DBAuctionBid instance);
    partial void UpdateDBAuctionBid(DBAuctionBid instance);
    partial void DeleteDBAuctionBid(DBAuctionBid instance);
    partial void InsertDBAccount(DBAccount instance);
    partial void UpdateDBAccount(DBAccount instance);
    partial void DeleteDBAccount(DBAccount instance);
    #endregion
		
		public UWoWDataContext() : 
				base(global::Hazzik.Properties.Settings.Default.uwowConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UWoWDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UWoWDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UWoWDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UWoWDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DBItem> DBItems
		{
			get
			{
				return this.GetTable<DBItem>();
			}
		}
		
		public System.Data.Linq.Table<DBItemTemplate> DBItemTemplates
		{
			get
			{
				return this.GetTable<DBItemTemplate>();
			}
		}
		
		public System.Data.Linq.Table<DBCharacter> DBCharacters
		{
			get
			{
				return this.GetTable<DBCharacter>();
			}
		}
		
		public System.Data.Linq.Table<DBItemInventory> DBItemInventories
		{
			get
			{
				return this.GetTable<DBItemInventory>();
			}
		}
		
		public System.Data.Linq.Table<DBCharacterInventory> DBCharacterInventories
		{
			get
			{
				return this.GetTable<DBCharacterInventory>();
			}
		}
		
		public System.Data.Linq.Table<DBAuctionHouse> DBAuctionHouses
		{
			get
			{
				return this.GetTable<DBAuctionHouse>();
			}
		}
		
		public System.Data.Linq.Table<DBAuctionItem> DBAuctionItems
		{
			get
			{
				return this.GetTable<DBAuctionItem>();
			}
		}
		
		public System.Data.Linq.Table<DBAuctionBid> DBAuctionBids
		{
			get
			{
				return this.GetTable<DBAuctionBid>();
			}
		}
		
		public System.Data.Linq.Table<DBAccount> DBAccounts
		{
			get
			{
				return this.GetTable<DBAccount>();
			}
		}
	}
	
	[Table(Name="dbo.Items")]
	public partial class DBItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Guid;
		
		private int _ID;
		
		private EntitySet<DBItemInventory> _Inventory;
		
		private EntityRef<DBItemInventory> _Container;
		
		private EntityRef<DBCharacterInventory> _Owner;
		
		private EntitySet<DBAuctionItem> _DBAuctionItems;
		
		private EntityRef<DBItemTemplate> _ItemTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(long value);
    partial void OnGuidChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public DBItem()
		{
			this._Inventory = new EntitySet<DBItemInventory>(new Action<DBItemInventory>(this.attach_Inventory), new Action<DBItemInventory>(this.detach_Inventory));
			this._Container = default(EntityRef<DBItemInventory>);
			this._Owner = default(EntityRef<DBCharacterInventory>);
			this._DBAuctionItems = new EntitySet<DBAuctionItem>(new Action<DBAuctionItem>(this.attach_DBAuctionItems), new Action<DBAuctionItem>(this.detach_DBAuctionItems));
			this._ItemTemplate = default(EntityRef<DBItemTemplate>);
			OnCreated();
		}
		
		[Column(Storage="_Guid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ItemTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="DBItem_DBItemInventory", Storage="_Inventory", OtherKey="ContainerGuid")]
		public EntitySet<DBItemInventory> Inventory
		{
			get
			{
				return this._Inventory;
			}
			set
			{
				this._Inventory.Assign(value);
			}
		}
		
		[Association(Name="DBItem_DBItemInventory1", Storage="_Container", ThisKey="Guid", OtherKey="ItemGuid", IsUnique=true, IsForeignKey=false)]
		public DBItemInventory Container
		{
			get
			{
				return this._Container.Entity;
			}
			set
			{
				DBItemInventory previousValue = this._Container.Entity;
				if (((previousValue != value) 
							|| (this._Container.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Container.Entity = null;
						previousValue.DBItem = null;
					}
					this._Container.Entity = value;
					if ((value != null))
					{
						value.DBItem = this;
					}
					this.SendPropertyChanged("Container");
				}
			}
		}
		
		[Association(Name="DBItem_DBCharacterInventory", Storage="_Owner", ThisKey="Guid", OtherKey="ItemGuid", IsUnique=true, IsForeignKey=false)]
		public DBCharacterInventory Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				DBCharacterInventory previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.DBItem = null;
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.DBItem = this;
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[Association(Name="DBItem_DBAuctionItem", Storage="_DBAuctionItems", OtherKey="ItemGuid")]
		public EntitySet<DBAuctionItem> DBAuctionItems
		{
			get
			{
				return this._DBAuctionItems;
			}
			set
			{
				this._DBAuctionItems.Assign(value);
			}
		}
		
		[Association(Name="DBItemTemplate_DBItem", Storage="_ItemTemplate", ThisKey="ID", IsForeignKey=true)]
		public DBItemTemplate DBItemTemplate
		{
			get
			{
				return this._ItemTemplate.Entity;
			}
			set
			{
				DBItemTemplate previousValue = this._ItemTemplate.Entity;
				if (((previousValue != value) 
							|| (this._ItemTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemTemplate.Entity = null;
						previousValue.DBItems.Remove(this);
					}
					this._ItemTemplate.Entity = value;
					if ((value != null))
					{
						value.DBItems.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("DBItemTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventory(DBItemInventory entity)
		{
			this.SendPropertyChanging();
			entity.Container = this;
		}
		
		private void detach_Inventory(DBItemInventory entity)
		{
			this.SendPropertyChanging();
			entity.Container = null;
		}
		
		private void attach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBItem = this;
		}
		
		private void detach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBItem = null;
		}
	}
	
	[Table(Name="dbo.ItemTemplates")]
	public partial class DBItemTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ClassID;
		
		private System.Nullable<int> _SubClassID;
		
		private System.Nullable<int> _DepClassID;
		
		private string _Name1;
		
		private string _Name2;
		
		private string _Name3;
		
		private string _Name4;
		
		private System.Nullable<int> _DisplayID;
		
		private System.Nullable<int> _QualityID;
		
		private System.Nullable<int> _TypeBin;
		
		private System.Nullable<int> _BuyPrice;
		
		private System.Nullable<int> _SellPrice;
		
		private System.Nullable<int> _EquipSlotID;
		
		private System.Nullable<int> _ClassesBin;
		
		private System.Nullable<int> _RacesBin;
		
		private System.Nullable<int> _ItemLevel;
		
		private System.Nullable<int> _RequiredLvl;
		
		private System.Nullable<int> _RequiredSkillID;
		
		private System.Nullable<int> _RequiredSkillLvl;
		
		private System.Nullable<int> _RequiredRankID;
		
		private System.Nullable<int> _RequiredSuperRankID;
		
		private System.Nullable<int> _RequiredFactionID;
		
		private System.Nullable<int> _RequiredFactionLvl;
		
		private System.Nullable<int> _StackUniqueMax;
		
		private System.Nullable<int> _StackMax;
		
		private System.Nullable<int> _Stat1ID;
		
		private System.Nullable<int> _Stat1;
		
		private System.Nullable<int> _Stat2ID;
		
		private System.Nullable<int> _Stat2;
		
		private System.Nullable<int> _Stat3ID;
		
		private System.Nullable<int> _Stat3;
		
		private System.Nullable<int> _Stat4ID;
		
		private System.Nullable<int> _Stat4;
		
		private System.Nullable<int> _Stat5ID;
		
		private System.Nullable<int> _Stat5;
		
		private System.Nullable<int> _Stat6ID;
		
		private System.Nullable<int> _Stat6;
		
		private System.Nullable<int> _Stat7ID;
		
		private System.Nullable<int> _Stat7;
		
		private System.Nullable<int> _Stat8ID;
		
		private System.Nullable<int> _Stat8;
		
		private System.Nullable<int> _Stat9ID;
		
		private System.Nullable<int> _Stat9;
		
		private System.Nullable<int> _Stat10ID;
		
		private System.Nullable<int> _Stat10;
		
		private System.Nullable<float> _Dmg1Min;
		
		private System.Nullable<float> _Dmg1Max;
		
		private System.Nullable<int> _Dmg1TypeID;
		
		private System.Nullable<float> _Dmg2Min;
		
		private System.Nullable<float> _Dmg2Max;
		
		private System.Nullable<int> _Dmg2TypeID;
		
		private System.Nullable<float> _Dmg3Min;
		
		private System.Nullable<float> _Dmg3Max;
		
		private System.Nullable<int> _Dmg3TypeID;
		
		private System.Nullable<float> _Dmg4Min;
		
		private System.Nullable<float> _Dmg4Max;
		
		private System.Nullable<int> _Dmg4TypeID;
		
		private System.Nullable<float> _Dmg5Min;
		
		private System.Nullable<float> _Dmg5Max;
		
		private System.Nullable<int> _Dmg5TypeID;
		
		private System.Nullable<int> _ResistHoly;
		
		private System.Nullable<int> _ResistPhys;
		
		private System.Nullable<int> _ResistFire;
		
		private System.Nullable<int> _ResistNature;
		
		private System.Nullable<int> _ResistFrost;
		
		private System.Nullable<int> _ResistShadow;
		
		private System.Nullable<int> _ResistArcane;
		
		private System.Nullable<int> _WeaponDelay;
		
		private System.Nullable<int> _AmmoTypeID;
		
		private System.Nullable<float> _RangeMax;
		
		private System.Nullable<int> _Spell1ID;
		
		private System.Nullable<int> _Spell1TriggerID;
		
		private System.Nullable<int> _Spell1Charge;
		
		private System.Nullable<int> _Spell1Cooldown;
		
		private System.Nullable<int> _Spell1CategoryID;
		
		private System.Nullable<int> _Spell1CategoryCooldown;
		
		private System.Nullable<int> _Spell2ID;
		
		private System.Nullable<int> _Spell2Charge;
		
		private System.Nullable<int> _Spell2Cooldown;
		
		private System.Nullable<int> _Spell2CategoryID;
		
		private System.Nullable<int> _Spell2CategoryCooldown;
		
		private System.Nullable<int> _Spell3ID;
		
		private System.Nullable<int> _Spell3Charge;
		
		private System.Nullable<int> _Spell3Cooldown;
		
		private System.Nullable<int> _Spell3CategoryID;
		
		private System.Nullable<int> _Spell3CategoryCooldown;
		
		private System.Nullable<int> _Spell4ID;
		
		private System.Nullable<int> _Spell4Charge;
		
		private System.Nullable<int> _Spell4Cooldown;
		
		private System.Nullable<int> _Spell4CategoryID;
		
		private System.Nullable<int> _Spell4CategoryCooldown;
		
		private System.Nullable<int> _Spell5ID;
		
		private System.Nullable<int> _Spell5Charge;
		
		private System.Nullable<int> _Spell5Cooldown;
		
		private System.Nullable<int> _Spell5CategoryID;
		
		private System.Nullable<int> _Spell5CategoryCooldown;
		
		private System.Nullable<int> _BondID;
		
		private string _Description;
		
		private System.Nullable<int> _BookTextID;
		
		private System.Nullable<int> _BookLngID;
		
		private System.Nullable<int> _BookStationaryID;
		
		private System.Nullable<int> _StartQuestID;
		
		private System.Nullable<int> _LockPickMinLvl;
		
		private System.Nullable<int> _MaterialID;
		
		private System.Nullable<int> _SheathID;
		
		private System.Nullable<int> _RandProperty1ID;
		
		private System.Nullable<int> _RandProperty2ID;
		
		private System.Nullable<int> _Block;
		
		private System.Nullable<int> _ItemSetID;
		
		private System.Nullable<int> _DurationMax;
		
		private System.Nullable<int> _ItemAreaID;
		
		private System.Nullable<int> _ItemMapID;
		
		private System.Nullable<int> _BagFamilyID;
		
		private System.Nullable<int> _TotemCatDbcID;
		
		private System.Nullable<int> _Socket1ColorID;
		
		private System.Nullable<int> _Socket1;
		
		private System.Nullable<int> _Socket2ColorID;
		
		private System.Nullable<int> _Socket2;
		
		private System.Nullable<int> _Socket3ColorID;
		
		private System.Nullable<int> _Socket3;
		
		private System.Nullable<int> _SpellItemEnchDbcID;
		
		private System.Nullable<int> _GemPropertiesDbcID;
		
		private System.Nullable<int> _ExtCostID;
		
		private System.Nullable<int> _CondExtCostID;
		
		private System.Nullable<int> _DisenchantMinLvl;
		
		private System.Nullable<float> _ArmorDmgMod;
		
		private EntitySet<DBItem> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassIDChanging(System.Nullable<int> value);
    partial void OnClassIDChanged();
    partial void OnSubClassIDChanging(System.Nullable<int> value);
    partial void OnSubClassIDChanged();
    partial void OnDepClassIDChanging(System.Nullable<int> value);
    partial void OnDepClassIDChanged();
    partial void OnName1Changing(string value);
    partial void OnName1Changed();
    partial void OnName2Changing(string value);
    partial void OnName2Changed();
    partial void OnName3Changing(string value);
    partial void OnName3Changed();
    partial void OnName4Changing(string value);
    partial void OnName4Changed();
    partial void OnDisplayIDChanging(System.Nullable<int> value);
    partial void OnDisplayIDChanged();
    partial void OnQualityIDChanging(System.Nullable<int> value);
    partial void OnQualityIDChanged();
    partial void OnTypeBinChanging(System.Nullable<int> value);
    partial void OnTypeBinChanged();
    partial void OnBuyPriceChanging(System.Nullable<int> value);
    partial void OnBuyPriceChanged();
    partial void OnSellPriceChanging(System.Nullable<int> value);
    partial void OnSellPriceChanged();
    partial void OnEquipSlotIDChanging(System.Nullable<int> value);
    partial void OnEquipSlotIDChanged();
    partial void OnClassesBinChanging(System.Nullable<int> value);
    partial void OnClassesBinChanged();
    partial void OnRacesBinChanging(System.Nullable<int> value);
    partial void OnRacesBinChanged();
    partial void OnItemLevelChanging(System.Nullable<int> value);
    partial void OnItemLevelChanged();
    partial void OnRequiredLvlChanging(System.Nullable<int> value);
    partial void OnRequiredLvlChanged();
    partial void OnRequiredSkillIDChanging(System.Nullable<int> value);
    partial void OnRequiredSkillIDChanged();
    partial void OnRequiredSkillLvlChanging(System.Nullable<int> value);
    partial void OnRequiredSkillLvlChanged();
    partial void OnRequiredRankIDChanging(System.Nullable<int> value);
    partial void OnRequiredRankIDChanged();
    partial void OnRequiredSuperRankIDChanging(System.Nullable<int> value);
    partial void OnRequiredSuperRankIDChanged();
    partial void OnRequiredFactionIDChanging(System.Nullable<int> value);
    partial void OnRequiredFactionIDChanged();
    partial void OnRequiredFactionLvlChanging(System.Nullable<int> value);
    partial void OnRequiredFactionLvlChanged();
    partial void OnStackUniqueMaxChanging(System.Nullable<int> value);
    partial void OnStackUniqueMaxChanged();
    partial void OnStackMaxChanging(System.Nullable<int> value);
    partial void OnStackMaxChanged();
    partial void OnStat1IDChanging(System.Nullable<int> value);
    partial void OnStat1IDChanged();
    partial void OnStat1Changing(System.Nullable<int> value);
    partial void OnStat1Changed();
    partial void OnStat2IDChanging(System.Nullable<int> value);
    partial void OnStat2IDChanged();
    partial void OnStat2Changing(System.Nullable<int> value);
    partial void OnStat2Changed();
    partial void OnStat3IDChanging(System.Nullable<int> value);
    partial void OnStat3IDChanged();
    partial void OnStat3Changing(System.Nullable<int> value);
    partial void OnStat3Changed();
    partial void OnStat4IDChanging(System.Nullable<int> value);
    partial void OnStat4IDChanged();
    partial void OnStat4Changing(System.Nullable<int> value);
    partial void OnStat4Changed();
    partial void OnStat5IDChanging(System.Nullable<int> value);
    partial void OnStat5IDChanged();
    partial void OnStat5Changing(System.Nullable<int> value);
    partial void OnStat5Changed();
    partial void OnStat6IDChanging(System.Nullable<int> value);
    partial void OnStat6IDChanged();
    partial void OnStat6Changing(System.Nullable<int> value);
    partial void OnStat6Changed();
    partial void OnStat7IDChanging(System.Nullable<int> value);
    partial void OnStat7IDChanged();
    partial void OnStat7Changing(System.Nullable<int> value);
    partial void OnStat7Changed();
    partial void OnStat8IDChanging(System.Nullable<int> value);
    partial void OnStat8IDChanged();
    partial void OnStat8Changing(System.Nullable<int> value);
    partial void OnStat8Changed();
    partial void OnStat9IDChanging(System.Nullable<int> value);
    partial void OnStat9IDChanged();
    partial void OnStat9Changing(System.Nullable<int> value);
    partial void OnStat9Changed();
    partial void OnStat10IDChanging(System.Nullable<int> value);
    partial void OnStat10IDChanged();
    partial void OnStat10Changing(System.Nullable<int> value);
    partial void OnStat10Changed();
    partial void OnDmg1MinChanging(System.Nullable<float> value);
    partial void OnDmg1MinChanged();
    partial void OnDmg1MaxChanging(System.Nullable<float> value);
    partial void OnDmg1MaxChanged();
    partial void OnDmg1TypeIDChanging(System.Nullable<int> value);
    partial void OnDmg1TypeIDChanged();
    partial void OnDmg2MinChanging(System.Nullable<float> value);
    partial void OnDmg2MinChanged();
    partial void OnDmg2MaxChanging(System.Nullable<float> value);
    partial void OnDmg2MaxChanged();
    partial void OnDmg2TypeIDChanging(System.Nullable<int> value);
    partial void OnDmg2TypeIDChanged();
    partial void OnDmg3MinChanging(System.Nullable<float> value);
    partial void OnDmg3MinChanged();
    partial void OnDmg3MaxChanging(System.Nullable<float> value);
    partial void OnDmg3MaxChanged();
    partial void OnDmg3TypeIDChanging(System.Nullable<int> value);
    partial void OnDmg3TypeIDChanged();
    partial void OnDmg4MinChanging(System.Nullable<float> value);
    partial void OnDmg4MinChanged();
    partial void OnDmg4MaxChanging(System.Nullable<float> value);
    partial void OnDmg4MaxChanged();
    partial void OnDmg4TypeIDChanging(System.Nullable<int> value);
    partial void OnDmg4TypeIDChanged();
    partial void OnDmg5MinChanging(System.Nullable<float> value);
    partial void OnDmg5MinChanged();
    partial void OnDmg5MaxChanging(System.Nullable<float> value);
    partial void OnDmg5MaxChanged();
    partial void OnDmg5TypeIDChanging(System.Nullable<int> value);
    partial void OnDmg5TypeIDChanged();
    partial void OnResistHolyChanging(System.Nullable<int> value);
    partial void OnResistHolyChanged();
    partial void OnResistPhysChanging(System.Nullable<int> value);
    partial void OnResistPhysChanged();
    partial void OnResistFireChanging(System.Nullable<int> value);
    partial void OnResistFireChanged();
    partial void OnResistNatureChanging(System.Nullable<int> value);
    partial void OnResistNatureChanged();
    partial void OnResistFrostChanging(System.Nullable<int> value);
    partial void OnResistFrostChanged();
    partial void OnResistShadowChanging(System.Nullable<int> value);
    partial void OnResistShadowChanged();
    partial void OnResistArcaneChanging(System.Nullable<int> value);
    partial void OnResistArcaneChanged();
    partial void OnWeaponDelayChanging(System.Nullable<int> value);
    partial void OnWeaponDelayChanged();
    partial void OnAmmoTypeIDChanging(System.Nullable<int> value);
    partial void OnAmmoTypeIDChanged();
    partial void OnRangeMaxChanging(System.Nullable<float> value);
    partial void OnRangeMaxChanged();
    partial void OnSpell1IDChanging(System.Nullable<int> value);
    partial void OnSpell1IDChanged();
    partial void OnSpell1TriggerIDChanging(System.Nullable<int> value);
    partial void OnSpell1TriggerIDChanged();
    partial void OnSpell1ChargeChanging(System.Nullable<int> value);
    partial void OnSpell1ChargeChanged();
    partial void OnSpell1CooldownChanging(System.Nullable<int> value);
    partial void OnSpell1CooldownChanged();
    partial void OnSpell1CategoryIDChanging(System.Nullable<int> value);
    partial void OnSpell1CategoryIDChanged();
    partial void OnSpell1CategoryCooldownChanging(System.Nullable<int> value);
    partial void OnSpell1CategoryCooldownChanged();
    partial void OnSpell2IDChanging(System.Nullable<int> value);
    partial void OnSpell2IDChanged();
    partial void OnSpell2ChargeChanging(System.Nullable<int> value);
    partial void OnSpell2ChargeChanged();
    partial void OnSpell2CooldownChanging(System.Nullable<int> value);
    partial void OnSpell2CooldownChanged();
    partial void OnSpell2CategoryIDChanging(System.Nullable<int> value);
    partial void OnSpell2CategoryIDChanged();
    partial void OnSpell2CategoryCooldownChanging(System.Nullable<int> value);
    partial void OnSpell2CategoryCooldownChanged();
    partial void OnSpell3IDChanging(System.Nullable<int> value);
    partial void OnSpell3IDChanged();
    partial void OnSpell3ChargeChanging(System.Nullable<int> value);
    partial void OnSpell3ChargeChanged();
    partial void OnSpell3CooldownChanging(System.Nullable<int> value);
    partial void OnSpell3CooldownChanged();
    partial void OnSpell3CategoryIDChanging(System.Nullable<int> value);
    partial void OnSpell3CategoryIDChanged();
    partial void OnSpell3CategoryCooldownChanging(System.Nullable<int> value);
    partial void OnSpell3CategoryCooldownChanged();
    partial void OnSpell4IDChanging(System.Nullable<int> value);
    partial void OnSpell4IDChanged();
    partial void OnSpell4ChargeChanging(System.Nullable<int> value);
    partial void OnSpell4ChargeChanged();
    partial void OnSpell4CooldownChanging(System.Nullable<int> value);
    partial void OnSpell4CooldownChanged();
    partial void OnSpell4CategoryIDChanging(System.Nullable<int> value);
    partial void OnSpell4CategoryIDChanged();
    partial void OnSpell4CategoryCooldownChanging(System.Nullable<int> value);
    partial void OnSpell4CategoryCooldownChanged();
    partial void OnSpell5IDChanging(System.Nullable<int> value);
    partial void OnSpell5IDChanged();
    partial void OnSpell5ChargeChanging(System.Nullable<int> value);
    partial void OnSpell5ChargeChanged();
    partial void OnSpell5CooldownChanging(System.Nullable<int> value);
    partial void OnSpell5CooldownChanged();
    partial void OnSpell5CategoryIDChanging(System.Nullable<int> value);
    partial void OnSpell5CategoryIDChanged();
    partial void OnSpell5CategoryCooldownChanging(System.Nullable<int> value);
    partial void OnSpell5CategoryCooldownChanged();
    partial void OnBondIDChanging(System.Nullable<int> value);
    partial void OnBondIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBookTextIDChanging(System.Nullable<int> value);
    partial void OnBookTextIDChanged();
    partial void OnBookLngIDChanging(System.Nullable<int> value);
    partial void OnBookLngIDChanged();
    partial void OnBookStationaryIDChanging(System.Nullable<int> value);
    partial void OnBookStationaryIDChanged();
    partial void OnStartQuestIDChanging(System.Nullable<int> value);
    partial void OnStartQuestIDChanged();
    partial void OnLockPickMinLvlChanging(System.Nullable<int> value);
    partial void OnLockPickMinLvlChanged();
    partial void OnMaterialIDChanging(System.Nullable<int> value);
    partial void OnMaterialIDChanged();
    partial void OnSheathIDChanging(System.Nullable<int> value);
    partial void OnSheathIDChanged();
    partial void OnRandProperty1IDChanging(System.Nullable<int> value);
    partial void OnRandProperty1IDChanged();
    partial void OnRandProperty2IDChanging(System.Nullable<int> value);
    partial void OnRandProperty2IDChanged();
    partial void OnBlockChanging(System.Nullable<int> value);
    partial void OnBlockChanged();
    partial void OnItemSetIDChanging(System.Nullable<int> value);
    partial void OnItemSetIDChanged();
    partial void OnDurationMaxChanging(System.Nullable<int> value);
    partial void OnDurationMaxChanged();
    partial void OnItemAreaIDChanging(System.Nullable<int> value);
    partial void OnItemAreaIDChanged();
    partial void OnItemMapIDChanging(System.Nullable<int> value);
    partial void OnItemMapIDChanged();
    partial void OnBagFamilyIDChanging(System.Nullable<int> value);
    partial void OnBagFamilyIDChanged();
    partial void OnTotemCatDbcIDChanging(System.Nullable<int> value);
    partial void OnTotemCatDbcIDChanged();
    partial void OnSocket1ColorIDChanging(System.Nullable<int> value);
    partial void OnSocket1ColorIDChanged();
    partial void OnSocket1Changing(System.Nullable<int> value);
    partial void OnSocket1Changed();
    partial void OnSocket2ColorIDChanging(System.Nullable<int> value);
    partial void OnSocket2ColorIDChanged();
    partial void OnSocket2Changing(System.Nullable<int> value);
    partial void OnSocket2Changed();
    partial void OnSocket3ColorIDChanging(System.Nullable<int> value);
    partial void OnSocket3ColorIDChanged();
    partial void OnSocket3Changing(System.Nullable<int> value);
    partial void OnSocket3Changed();
    partial void OnSpellItemEnchDbcIDChanging(System.Nullable<int> value);
    partial void OnSpellItemEnchDbcIDChanged();
    partial void OnGemPropertiesDbcIDChanging(System.Nullable<int> value);
    partial void OnGemPropertiesDbcIDChanged();
    partial void OnExtCostIDChanging(System.Nullable<int> value);
    partial void OnExtCostIDChanged();
    partial void OnCondExtCostIDChanging(System.Nullable<int> value);
    partial void OnCondExtCostIDChanged();
    partial void OnDisenchantMinLvlChanging(System.Nullable<int> value);
    partial void OnDisenchantMinLvlChanged();
    partial void OnArmorDmgModChanging(System.Nullable<float> value);
    partial void OnArmorDmgModChanged();
    #endregion
		
		public DBItemTemplate()
		{
			this._Items = new EntitySet<DBItem>(new Action<DBItem>(this.attach_Items), new Action<DBItem>(this.detach_Items));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassID", DbType="Int")]
		public System.Nullable<int> ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubClassID", DbType="Int")]
		public System.Nullable<int> SubClassID
		{
			get
			{
				return this._SubClassID;
			}
			set
			{
				if ((this._SubClassID != value))
				{
					this.OnSubClassIDChanging(value);
					this.SendPropertyChanging();
					this._SubClassID = value;
					this.SendPropertyChanged("SubClassID");
					this.OnSubClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_DepClassID", DbType="Int")]
		public System.Nullable<int> DepClassID
		{
			get
			{
				return this._DepClassID;
			}
			set
			{
				if ((this._DepClassID != value))
				{
					this.OnDepClassIDChanging(value);
					this.SendPropertyChanging();
					this._DepClassID = value;
					this.SendPropertyChanged("DepClassID");
					this.OnDepClassIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name1", DbType="NVarChar(50)")]
		public string Name1
		{
			get
			{
				return this._Name1;
			}
			set
			{
				if ((this._Name1 != value))
				{
					this.OnName1Changing(value);
					this.SendPropertyChanging();
					this._Name1 = value;
					this.SendPropertyChanged("Name1");
					this.OnName1Changed();
				}
			}
		}
		
		[Column(Storage="_Name2", DbType="NVarChar(50)")]
		public string Name2
		{
			get
			{
				return this._Name2;
			}
			set
			{
				if ((this._Name2 != value))
				{
					this.OnName2Changing(value);
					this.SendPropertyChanging();
					this._Name2 = value;
					this.SendPropertyChanged("Name2");
					this.OnName2Changed();
				}
			}
		}
		
		[Column(Storage="_Name3", DbType="NVarChar(50)")]
		public string Name3
		{
			get
			{
				return this._Name3;
			}
			set
			{
				if ((this._Name3 != value))
				{
					this.OnName3Changing(value);
					this.SendPropertyChanging();
					this._Name3 = value;
					this.SendPropertyChanged("Name3");
					this.OnName3Changed();
				}
			}
		}
		
		[Column(Storage="_Name4", DbType="NVarChar(50)")]
		public string Name4
		{
			get
			{
				return this._Name4;
			}
			set
			{
				if ((this._Name4 != value))
				{
					this.OnName4Changing(value);
					this.SendPropertyChanging();
					this._Name4 = value;
					this.SendPropertyChanged("Name4");
					this.OnName4Changed();
				}
			}
		}
		
		[Column(Storage="_DisplayID", DbType="Int")]
		public System.Nullable<int> DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_QualityID", DbType="Int")]
		public System.Nullable<int> QualityID
		{
			get
			{
				return this._QualityID;
			}
			set
			{
				if ((this._QualityID != value))
				{
					this.OnQualityIDChanging(value);
					this.SendPropertyChanging();
					this._QualityID = value;
					this.SendPropertyChanged("QualityID");
					this.OnQualityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeBin", DbType="Int")]
		public System.Nullable<int> TypeBin
		{
			get
			{
				return this._TypeBin;
			}
			set
			{
				if ((this._TypeBin != value))
				{
					this.OnTypeBinChanging(value);
					this.SendPropertyChanging();
					this._TypeBin = value;
					this.SendPropertyChanged("TypeBin");
					this.OnTypeBinChanged();
				}
			}
		}
		
		[Column(Storage="_BuyPrice", DbType="Int")]
		public System.Nullable<int> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[Column(Storage="_SellPrice", DbType="Int")]
		public System.Nullable<int> SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[Column(Storage="_EquipSlotID", DbType="Int")]
		public System.Nullable<int> EquipSlotID
		{
			get
			{
				return this._EquipSlotID;
			}
			set
			{
				if ((this._EquipSlotID != value))
				{
					this.OnEquipSlotIDChanging(value);
					this.SendPropertyChanging();
					this._EquipSlotID = value;
					this.SendPropertyChanged("EquipSlotID");
					this.OnEquipSlotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClassesBin", DbType="Int")]
		public System.Nullable<int> ClassesBin
		{
			get
			{
				return this._ClassesBin;
			}
			set
			{
				if ((this._ClassesBin != value))
				{
					this.OnClassesBinChanging(value);
					this.SendPropertyChanging();
					this._ClassesBin = value;
					this.SendPropertyChanged("ClassesBin");
					this.OnClassesBinChanged();
				}
			}
		}
		
		[Column(Storage="_RacesBin", DbType="Int")]
		public System.Nullable<int> RacesBin
		{
			get
			{
				return this._RacesBin;
			}
			set
			{
				if ((this._RacesBin != value))
				{
					this.OnRacesBinChanging(value);
					this.SendPropertyChanging();
					this._RacesBin = value;
					this.SendPropertyChanged("RacesBin");
					this.OnRacesBinChanged();
				}
			}
		}
		
		[Column(Storage="_ItemLevel", DbType="Int")]
		public System.Nullable<int> ItemLevel
		{
			get
			{
				return this._ItemLevel;
			}
			set
			{
				if ((this._ItemLevel != value))
				{
					this.OnItemLevelChanging(value);
					this.SendPropertyChanging();
					this._ItemLevel = value;
					this.SendPropertyChanged("ItemLevel");
					this.OnItemLevelChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredLvl", DbType="Int")]
		public System.Nullable<int> RequiredLvl
		{
			get
			{
				return this._RequiredLvl;
			}
			set
			{
				if ((this._RequiredLvl != value))
				{
					this.OnRequiredLvlChanging(value);
					this.SendPropertyChanging();
					this._RequiredLvl = value;
					this.SendPropertyChanged("RequiredLvl");
					this.OnRequiredLvlChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredSkillID", DbType="Int")]
		public System.Nullable<int> RequiredSkillID
		{
			get
			{
				return this._RequiredSkillID;
			}
			set
			{
				if ((this._RequiredSkillID != value))
				{
					this.OnRequiredSkillIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredSkillID = value;
					this.SendPropertyChanged("RequiredSkillID");
					this.OnRequiredSkillIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredSkillLvl", DbType="Int")]
		public System.Nullable<int> RequiredSkillLvl
		{
			get
			{
				return this._RequiredSkillLvl;
			}
			set
			{
				if ((this._RequiredSkillLvl != value))
				{
					this.OnRequiredSkillLvlChanging(value);
					this.SendPropertyChanging();
					this._RequiredSkillLvl = value;
					this.SendPropertyChanged("RequiredSkillLvl");
					this.OnRequiredSkillLvlChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredRankID", DbType="Int")]
		public System.Nullable<int> RequiredRankID
		{
			get
			{
				return this._RequiredRankID;
			}
			set
			{
				if ((this._RequiredRankID != value))
				{
					this.OnRequiredRankIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredRankID = value;
					this.SendPropertyChanged("RequiredRankID");
					this.OnRequiredRankIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredSuperRankID", DbType="Int")]
		public System.Nullable<int> RequiredSuperRankID
		{
			get
			{
				return this._RequiredSuperRankID;
			}
			set
			{
				if ((this._RequiredSuperRankID != value))
				{
					this.OnRequiredSuperRankIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredSuperRankID = value;
					this.SendPropertyChanged("RequiredSuperRankID");
					this.OnRequiredSuperRankIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredFactionID", DbType="Int")]
		public System.Nullable<int> RequiredFactionID
		{
			get
			{
				return this._RequiredFactionID;
			}
			set
			{
				if ((this._RequiredFactionID != value))
				{
					this.OnRequiredFactionIDChanging(value);
					this.SendPropertyChanging();
					this._RequiredFactionID = value;
					this.SendPropertyChanged("RequiredFactionID");
					this.OnRequiredFactionIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredFactionLvl", DbType="Int")]
		public System.Nullable<int> RequiredFactionLvl
		{
			get
			{
				return this._RequiredFactionLvl;
			}
			set
			{
				if ((this._RequiredFactionLvl != value))
				{
					this.OnRequiredFactionLvlChanging(value);
					this.SendPropertyChanging();
					this._RequiredFactionLvl = value;
					this.SendPropertyChanged("RequiredFactionLvl");
					this.OnRequiredFactionLvlChanged();
				}
			}
		}
		
		[Column(Storage="_StackUniqueMax", DbType="Int")]
		public System.Nullable<int> StackUniqueMax
		{
			get
			{
				return this._StackUniqueMax;
			}
			set
			{
				if ((this._StackUniqueMax != value))
				{
					this.OnStackUniqueMaxChanging(value);
					this.SendPropertyChanging();
					this._StackUniqueMax = value;
					this.SendPropertyChanged("StackUniqueMax");
					this.OnStackUniqueMaxChanged();
				}
			}
		}
		
		[Column(Storage="_StackMax", DbType="Int")]
		public System.Nullable<int> StackMax
		{
			get
			{
				return this._StackMax;
			}
			set
			{
				if ((this._StackMax != value))
				{
					this.OnStackMaxChanging(value);
					this.SendPropertyChanging();
					this._StackMax = value;
					this.SendPropertyChanged("StackMax");
					this.OnStackMaxChanged();
				}
			}
		}
		
		[Column(Storage="_Stat1ID", DbType="Int")]
		public System.Nullable<int> Stat1ID
		{
			get
			{
				return this._Stat1ID;
			}
			set
			{
				if ((this._Stat1ID != value))
				{
					this.OnStat1IDChanging(value);
					this.SendPropertyChanging();
					this._Stat1ID = value;
					this.SendPropertyChanged("Stat1ID");
					this.OnStat1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat1", DbType="Int")]
		public System.Nullable<int> Stat1
		{
			get
			{
				return this._Stat1;
			}
			set
			{
				if ((this._Stat1 != value))
				{
					this.OnStat1Changing(value);
					this.SendPropertyChanging();
					this._Stat1 = value;
					this.SendPropertyChanged("Stat1");
					this.OnStat1Changed();
				}
			}
		}
		
		[Column(Storage="_Stat2ID", DbType="Int")]
		public System.Nullable<int> Stat2ID
		{
			get
			{
				return this._Stat2ID;
			}
			set
			{
				if ((this._Stat2ID != value))
				{
					this.OnStat2IDChanging(value);
					this.SendPropertyChanging();
					this._Stat2ID = value;
					this.SendPropertyChanged("Stat2ID");
					this.OnStat2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat2", DbType="Int")]
		public System.Nullable<int> Stat2
		{
			get
			{
				return this._Stat2;
			}
			set
			{
				if ((this._Stat2 != value))
				{
					this.OnStat2Changing(value);
					this.SendPropertyChanging();
					this._Stat2 = value;
					this.SendPropertyChanged("Stat2");
					this.OnStat2Changed();
				}
			}
		}
		
		[Column(Storage="_Stat3ID", DbType="Int")]
		public System.Nullable<int> Stat3ID
		{
			get
			{
				return this._Stat3ID;
			}
			set
			{
				if ((this._Stat3ID != value))
				{
					this.OnStat3IDChanging(value);
					this.SendPropertyChanging();
					this._Stat3ID = value;
					this.SendPropertyChanged("Stat3ID");
					this.OnStat3IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat3", DbType="Int")]
		public System.Nullable<int> Stat3
		{
			get
			{
				return this._Stat3;
			}
			set
			{
				if ((this._Stat3 != value))
				{
					this.OnStat3Changing(value);
					this.SendPropertyChanging();
					this._Stat3 = value;
					this.SendPropertyChanged("Stat3");
					this.OnStat3Changed();
				}
			}
		}
		
		[Column(Storage="_Stat4ID", DbType="Int")]
		public System.Nullable<int> Stat4ID
		{
			get
			{
				return this._Stat4ID;
			}
			set
			{
				if ((this._Stat4ID != value))
				{
					this.OnStat4IDChanging(value);
					this.SendPropertyChanging();
					this._Stat4ID = value;
					this.SendPropertyChanged("Stat4ID");
					this.OnStat4IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat4", DbType="Int")]
		public System.Nullable<int> Stat4
		{
			get
			{
				return this._Stat4;
			}
			set
			{
				if ((this._Stat4 != value))
				{
					this.OnStat4Changing(value);
					this.SendPropertyChanging();
					this._Stat4 = value;
					this.SendPropertyChanged("Stat4");
					this.OnStat4Changed();
				}
			}
		}
		
		[Column(Storage="_Stat5ID", DbType="Int")]
		public System.Nullable<int> Stat5ID
		{
			get
			{
				return this._Stat5ID;
			}
			set
			{
				if ((this._Stat5ID != value))
				{
					this.OnStat5IDChanging(value);
					this.SendPropertyChanging();
					this._Stat5ID = value;
					this.SendPropertyChanged("Stat5ID");
					this.OnStat5IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat5", DbType="Int")]
		public System.Nullable<int> Stat5
		{
			get
			{
				return this._Stat5;
			}
			set
			{
				if ((this._Stat5 != value))
				{
					this.OnStat5Changing(value);
					this.SendPropertyChanging();
					this._Stat5 = value;
					this.SendPropertyChanged("Stat5");
					this.OnStat5Changed();
				}
			}
		}
		
		[Column(Storage="_Stat6ID", DbType="Int")]
		public System.Nullable<int> Stat6ID
		{
			get
			{
				return this._Stat6ID;
			}
			set
			{
				if ((this._Stat6ID != value))
				{
					this.OnStat6IDChanging(value);
					this.SendPropertyChanging();
					this._Stat6ID = value;
					this.SendPropertyChanged("Stat6ID");
					this.OnStat6IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat6", DbType="Int")]
		public System.Nullable<int> Stat6
		{
			get
			{
				return this._Stat6;
			}
			set
			{
				if ((this._Stat6 != value))
				{
					this.OnStat6Changing(value);
					this.SendPropertyChanging();
					this._Stat6 = value;
					this.SendPropertyChanged("Stat6");
					this.OnStat6Changed();
				}
			}
		}
		
		[Column(Storage="_Stat7ID", DbType="Int")]
		public System.Nullable<int> Stat7ID
		{
			get
			{
				return this._Stat7ID;
			}
			set
			{
				if ((this._Stat7ID != value))
				{
					this.OnStat7IDChanging(value);
					this.SendPropertyChanging();
					this._Stat7ID = value;
					this.SendPropertyChanged("Stat7ID");
					this.OnStat7IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat7", DbType="Int")]
		public System.Nullable<int> Stat7
		{
			get
			{
				return this._Stat7;
			}
			set
			{
				if ((this._Stat7 != value))
				{
					this.OnStat7Changing(value);
					this.SendPropertyChanging();
					this._Stat7 = value;
					this.SendPropertyChanged("Stat7");
					this.OnStat7Changed();
				}
			}
		}
		
		[Column(Storage="_Stat8ID", DbType="Int")]
		public System.Nullable<int> Stat8ID
		{
			get
			{
				return this._Stat8ID;
			}
			set
			{
				if ((this._Stat8ID != value))
				{
					this.OnStat8IDChanging(value);
					this.SendPropertyChanging();
					this._Stat8ID = value;
					this.SendPropertyChanged("Stat8ID");
					this.OnStat8IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat8", DbType="Int")]
		public System.Nullable<int> Stat8
		{
			get
			{
				return this._Stat8;
			}
			set
			{
				if ((this._Stat8 != value))
				{
					this.OnStat8Changing(value);
					this.SendPropertyChanging();
					this._Stat8 = value;
					this.SendPropertyChanged("Stat8");
					this.OnStat8Changed();
				}
			}
		}
		
		[Column(Storage="_Stat9ID", DbType="Int")]
		public System.Nullable<int> Stat9ID
		{
			get
			{
				return this._Stat9ID;
			}
			set
			{
				if ((this._Stat9ID != value))
				{
					this.OnStat9IDChanging(value);
					this.SendPropertyChanging();
					this._Stat9ID = value;
					this.SendPropertyChanged("Stat9ID");
					this.OnStat9IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat9", DbType="Int")]
		public System.Nullable<int> Stat9
		{
			get
			{
				return this._Stat9;
			}
			set
			{
				if ((this._Stat9 != value))
				{
					this.OnStat9Changing(value);
					this.SendPropertyChanging();
					this._Stat9 = value;
					this.SendPropertyChanged("Stat9");
					this.OnStat9Changed();
				}
			}
		}
		
		[Column(Storage="_Stat10ID", DbType="Int")]
		public System.Nullable<int> Stat10ID
		{
			get
			{
				return this._Stat10ID;
			}
			set
			{
				if ((this._Stat10ID != value))
				{
					this.OnStat10IDChanging(value);
					this.SendPropertyChanging();
					this._Stat10ID = value;
					this.SendPropertyChanged("Stat10ID");
					this.OnStat10IDChanged();
				}
			}
		}
		
		[Column(Storage="_Stat10", DbType="Int")]
		public System.Nullable<int> Stat10
		{
			get
			{
				return this._Stat10;
			}
			set
			{
				if ((this._Stat10 != value))
				{
					this.OnStat10Changing(value);
					this.SendPropertyChanging();
					this._Stat10 = value;
					this.SendPropertyChanged("Stat10");
					this.OnStat10Changed();
				}
			}
		}
		
		[Column(Storage="_Dmg1Min", DbType="Real")]
		public System.Nullable<float> Dmg1Min
		{
			get
			{
				return this._Dmg1Min;
			}
			set
			{
				if ((this._Dmg1Min != value))
				{
					this.OnDmg1MinChanging(value);
					this.SendPropertyChanging();
					this._Dmg1Min = value;
					this.SendPropertyChanged("Dmg1Min");
					this.OnDmg1MinChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg1Max", DbType="Real")]
		public System.Nullable<float> Dmg1Max
		{
			get
			{
				return this._Dmg1Max;
			}
			set
			{
				if ((this._Dmg1Max != value))
				{
					this.OnDmg1MaxChanging(value);
					this.SendPropertyChanging();
					this._Dmg1Max = value;
					this.SendPropertyChanged("Dmg1Max");
					this.OnDmg1MaxChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg1TypeID", DbType="Int")]
		public System.Nullable<int> Dmg1TypeID
		{
			get
			{
				return this._Dmg1TypeID;
			}
			set
			{
				if ((this._Dmg1TypeID != value))
				{
					this.OnDmg1TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Dmg1TypeID = value;
					this.SendPropertyChanged("Dmg1TypeID");
					this.OnDmg1TypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg2Min", DbType="Real")]
		public System.Nullable<float> Dmg2Min
		{
			get
			{
				return this._Dmg2Min;
			}
			set
			{
				if ((this._Dmg2Min != value))
				{
					this.OnDmg2MinChanging(value);
					this.SendPropertyChanging();
					this._Dmg2Min = value;
					this.SendPropertyChanged("Dmg2Min");
					this.OnDmg2MinChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg2Max", DbType="Real")]
		public System.Nullable<float> Dmg2Max
		{
			get
			{
				return this._Dmg2Max;
			}
			set
			{
				if ((this._Dmg2Max != value))
				{
					this.OnDmg2MaxChanging(value);
					this.SendPropertyChanging();
					this._Dmg2Max = value;
					this.SendPropertyChanged("Dmg2Max");
					this.OnDmg2MaxChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg2TypeID", DbType="Int")]
		public System.Nullable<int> Dmg2TypeID
		{
			get
			{
				return this._Dmg2TypeID;
			}
			set
			{
				if ((this._Dmg2TypeID != value))
				{
					this.OnDmg2TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Dmg2TypeID = value;
					this.SendPropertyChanged("Dmg2TypeID");
					this.OnDmg2TypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg3Min", DbType="Real")]
		public System.Nullable<float> Dmg3Min
		{
			get
			{
				return this._Dmg3Min;
			}
			set
			{
				if ((this._Dmg3Min != value))
				{
					this.OnDmg3MinChanging(value);
					this.SendPropertyChanging();
					this._Dmg3Min = value;
					this.SendPropertyChanged("Dmg3Min");
					this.OnDmg3MinChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg3Max", DbType="Real")]
		public System.Nullable<float> Dmg3Max
		{
			get
			{
				return this._Dmg3Max;
			}
			set
			{
				if ((this._Dmg3Max != value))
				{
					this.OnDmg3MaxChanging(value);
					this.SendPropertyChanging();
					this._Dmg3Max = value;
					this.SendPropertyChanged("Dmg3Max");
					this.OnDmg3MaxChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg3TypeID", DbType="Int")]
		public System.Nullable<int> Dmg3TypeID
		{
			get
			{
				return this._Dmg3TypeID;
			}
			set
			{
				if ((this._Dmg3TypeID != value))
				{
					this.OnDmg3TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Dmg3TypeID = value;
					this.SendPropertyChanged("Dmg3TypeID");
					this.OnDmg3TypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg4Min", DbType="Real")]
		public System.Nullable<float> Dmg4Min
		{
			get
			{
				return this._Dmg4Min;
			}
			set
			{
				if ((this._Dmg4Min != value))
				{
					this.OnDmg4MinChanging(value);
					this.SendPropertyChanging();
					this._Dmg4Min = value;
					this.SendPropertyChanged("Dmg4Min");
					this.OnDmg4MinChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg4Max", DbType="Real")]
		public System.Nullable<float> Dmg4Max
		{
			get
			{
				return this._Dmg4Max;
			}
			set
			{
				if ((this._Dmg4Max != value))
				{
					this.OnDmg4MaxChanging(value);
					this.SendPropertyChanging();
					this._Dmg4Max = value;
					this.SendPropertyChanged("Dmg4Max");
					this.OnDmg4MaxChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg4TypeID", DbType="Int")]
		public System.Nullable<int> Dmg4TypeID
		{
			get
			{
				return this._Dmg4TypeID;
			}
			set
			{
				if ((this._Dmg4TypeID != value))
				{
					this.OnDmg4TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Dmg4TypeID = value;
					this.SendPropertyChanged("Dmg4TypeID");
					this.OnDmg4TypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg5Min", DbType="Real")]
		public System.Nullable<float> Dmg5Min
		{
			get
			{
				return this._Dmg5Min;
			}
			set
			{
				if ((this._Dmg5Min != value))
				{
					this.OnDmg5MinChanging(value);
					this.SendPropertyChanging();
					this._Dmg5Min = value;
					this.SendPropertyChanged("Dmg5Min");
					this.OnDmg5MinChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg5Max", DbType="Real")]
		public System.Nullable<float> Dmg5Max
		{
			get
			{
				return this._Dmg5Max;
			}
			set
			{
				if ((this._Dmg5Max != value))
				{
					this.OnDmg5MaxChanging(value);
					this.SendPropertyChanging();
					this._Dmg5Max = value;
					this.SendPropertyChanged("Dmg5Max");
					this.OnDmg5MaxChanged();
				}
			}
		}
		
		[Column(Storage="_Dmg5TypeID", DbType="Int")]
		public System.Nullable<int> Dmg5TypeID
		{
			get
			{
				return this._Dmg5TypeID;
			}
			set
			{
				if ((this._Dmg5TypeID != value))
				{
					this.OnDmg5TypeIDChanging(value);
					this.SendPropertyChanging();
					this._Dmg5TypeID = value;
					this.SendPropertyChanged("Dmg5TypeID");
					this.OnDmg5TypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ResistHoly", DbType="Int")]
		public System.Nullable<int> ResistHoly
		{
			get
			{
				return this._ResistHoly;
			}
			set
			{
				if ((this._ResistHoly != value))
				{
					this.OnResistHolyChanging(value);
					this.SendPropertyChanging();
					this._ResistHoly = value;
					this.SendPropertyChanged("ResistHoly");
					this.OnResistHolyChanged();
				}
			}
		}
		
		[Column(Storage="_ResistPhys", DbType="Int")]
		public System.Nullable<int> ResistPhys
		{
			get
			{
				return this._ResistPhys;
			}
			set
			{
				if ((this._ResistPhys != value))
				{
					this.OnResistPhysChanging(value);
					this.SendPropertyChanging();
					this._ResistPhys = value;
					this.SendPropertyChanged("ResistPhys");
					this.OnResistPhysChanged();
				}
			}
		}
		
		[Column(Storage="_ResistFire", DbType="Int")]
		public System.Nullable<int> ResistFire
		{
			get
			{
				return this._ResistFire;
			}
			set
			{
				if ((this._ResistFire != value))
				{
					this.OnResistFireChanging(value);
					this.SendPropertyChanging();
					this._ResistFire = value;
					this.SendPropertyChanged("ResistFire");
					this.OnResistFireChanged();
				}
			}
		}
		
		[Column(Storage="_ResistNature", DbType="Int")]
		public System.Nullable<int> ResistNature
		{
			get
			{
				return this._ResistNature;
			}
			set
			{
				if ((this._ResistNature != value))
				{
					this.OnResistNatureChanging(value);
					this.SendPropertyChanging();
					this._ResistNature = value;
					this.SendPropertyChanged("ResistNature");
					this.OnResistNatureChanged();
				}
			}
		}
		
		[Column(Storage="_ResistFrost", DbType="Int")]
		public System.Nullable<int> ResistFrost
		{
			get
			{
				return this._ResistFrost;
			}
			set
			{
				if ((this._ResistFrost != value))
				{
					this.OnResistFrostChanging(value);
					this.SendPropertyChanging();
					this._ResistFrost = value;
					this.SendPropertyChanged("ResistFrost");
					this.OnResistFrostChanged();
				}
			}
		}
		
		[Column(Storage="_ResistShadow", DbType="Int")]
		public System.Nullable<int> ResistShadow
		{
			get
			{
				return this._ResistShadow;
			}
			set
			{
				if ((this._ResistShadow != value))
				{
					this.OnResistShadowChanging(value);
					this.SendPropertyChanging();
					this._ResistShadow = value;
					this.SendPropertyChanged("ResistShadow");
					this.OnResistShadowChanged();
				}
			}
		}
		
		[Column(Storage="_ResistArcane", DbType="Int")]
		public System.Nullable<int> ResistArcane
		{
			get
			{
				return this._ResistArcane;
			}
			set
			{
				if ((this._ResistArcane != value))
				{
					this.OnResistArcaneChanging(value);
					this.SendPropertyChanging();
					this._ResistArcane = value;
					this.SendPropertyChanged("ResistArcane");
					this.OnResistArcaneChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponDelay", DbType="Int")]
		public System.Nullable<int> WeaponDelay
		{
			get
			{
				return this._WeaponDelay;
			}
			set
			{
				if ((this._WeaponDelay != value))
				{
					this.OnWeaponDelayChanging(value);
					this.SendPropertyChanging();
					this._WeaponDelay = value;
					this.SendPropertyChanged("WeaponDelay");
					this.OnWeaponDelayChanged();
				}
			}
		}
		
		[Column(Storage="_AmmoTypeID", DbType="Int")]
		public System.Nullable<int> AmmoTypeID
		{
			get
			{
				return this._AmmoTypeID;
			}
			set
			{
				if ((this._AmmoTypeID != value))
				{
					this.OnAmmoTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AmmoTypeID = value;
					this.SendPropertyChanged("AmmoTypeID");
					this.OnAmmoTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RangeMax", DbType="Real")]
		public System.Nullable<float> RangeMax
		{
			get
			{
				return this._RangeMax;
			}
			set
			{
				if ((this._RangeMax != value))
				{
					this.OnRangeMaxChanging(value);
					this.SendPropertyChanging();
					this._RangeMax = value;
					this.SendPropertyChanged("RangeMax");
					this.OnRangeMaxChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1ID", DbType="Int")]
		public System.Nullable<int> Spell1ID
		{
			get
			{
				return this._Spell1ID;
			}
			set
			{
				if ((this._Spell1ID != value))
				{
					this.OnSpell1IDChanging(value);
					this.SendPropertyChanging();
					this._Spell1ID = value;
					this.SendPropertyChanged("Spell1ID");
					this.OnSpell1IDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1TriggerID", DbType="Int")]
		public System.Nullable<int> Spell1TriggerID
		{
			get
			{
				return this._Spell1TriggerID;
			}
			set
			{
				if ((this._Spell1TriggerID != value))
				{
					this.OnSpell1TriggerIDChanging(value);
					this.SendPropertyChanging();
					this._Spell1TriggerID = value;
					this.SendPropertyChanged("Spell1TriggerID");
					this.OnSpell1TriggerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1Charge", DbType="Int")]
		public System.Nullable<int> Spell1Charge
		{
			get
			{
				return this._Spell1Charge;
			}
			set
			{
				if ((this._Spell1Charge != value))
				{
					this.OnSpell1ChargeChanging(value);
					this.SendPropertyChanging();
					this._Spell1Charge = value;
					this.SendPropertyChanged("Spell1Charge");
					this.OnSpell1ChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1Cooldown", DbType="Int")]
		public System.Nullable<int> Spell1Cooldown
		{
			get
			{
				return this._Spell1Cooldown;
			}
			set
			{
				if ((this._Spell1Cooldown != value))
				{
					this.OnSpell1CooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell1Cooldown = value;
					this.SendPropertyChanged("Spell1Cooldown");
					this.OnSpell1CooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1CategoryID", DbType="Int")]
		public System.Nullable<int> Spell1CategoryID
		{
			get
			{
				return this._Spell1CategoryID;
			}
			set
			{
				if ((this._Spell1CategoryID != value))
				{
					this.OnSpell1CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._Spell1CategoryID = value;
					this.SendPropertyChanged("Spell1CategoryID");
					this.OnSpell1CategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell1CategoryCooldown", DbType="Int")]
		public System.Nullable<int> Spell1CategoryCooldown
		{
			get
			{
				return this._Spell1CategoryCooldown;
			}
			set
			{
				if ((this._Spell1CategoryCooldown != value))
				{
					this.OnSpell1CategoryCooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell1CategoryCooldown = value;
					this.SendPropertyChanged("Spell1CategoryCooldown");
					this.OnSpell1CategoryCooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell2ID", DbType="Int")]
		public System.Nullable<int> Spell2ID
		{
			get
			{
				return this._Spell2ID;
			}
			set
			{
				if ((this._Spell2ID != value))
				{
					this.OnSpell2IDChanging(value);
					this.SendPropertyChanging();
					this._Spell2ID = value;
					this.SendPropertyChanged("Spell2ID");
					this.OnSpell2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell2Charge", DbType="Int")]
		public System.Nullable<int> Spell2Charge
		{
			get
			{
				return this._Spell2Charge;
			}
			set
			{
				if ((this._Spell2Charge != value))
				{
					this.OnSpell2ChargeChanging(value);
					this.SendPropertyChanging();
					this._Spell2Charge = value;
					this.SendPropertyChanged("Spell2Charge");
					this.OnSpell2ChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Spell2Cooldown", DbType="Int")]
		public System.Nullable<int> Spell2Cooldown
		{
			get
			{
				return this._Spell2Cooldown;
			}
			set
			{
				if ((this._Spell2Cooldown != value))
				{
					this.OnSpell2CooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell2Cooldown = value;
					this.SendPropertyChanged("Spell2Cooldown");
					this.OnSpell2CooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell2CategoryID", DbType="Int")]
		public System.Nullable<int> Spell2CategoryID
		{
			get
			{
				return this._Spell2CategoryID;
			}
			set
			{
				if ((this._Spell2CategoryID != value))
				{
					this.OnSpell2CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._Spell2CategoryID = value;
					this.SendPropertyChanged("Spell2CategoryID");
					this.OnSpell2CategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell2CategoryCooldown", DbType="Int")]
		public System.Nullable<int> Spell2CategoryCooldown
		{
			get
			{
				return this._Spell2CategoryCooldown;
			}
			set
			{
				if ((this._Spell2CategoryCooldown != value))
				{
					this.OnSpell2CategoryCooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell2CategoryCooldown = value;
					this.SendPropertyChanged("Spell2CategoryCooldown");
					this.OnSpell2CategoryCooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell3ID", DbType="Int")]
		public System.Nullable<int> Spell3ID
		{
			get
			{
				return this._Spell3ID;
			}
			set
			{
				if ((this._Spell3ID != value))
				{
					this.OnSpell3IDChanging(value);
					this.SendPropertyChanging();
					this._Spell3ID = value;
					this.SendPropertyChanged("Spell3ID");
					this.OnSpell3IDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell3Charge", DbType="Int")]
		public System.Nullable<int> Spell3Charge
		{
			get
			{
				return this._Spell3Charge;
			}
			set
			{
				if ((this._Spell3Charge != value))
				{
					this.OnSpell3ChargeChanging(value);
					this.SendPropertyChanging();
					this._Spell3Charge = value;
					this.SendPropertyChanged("Spell3Charge");
					this.OnSpell3ChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Spell3Cooldown", DbType="Int")]
		public System.Nullable<int> Spell3Cooldown
		{
			get
			{
				return this._Spell3Cooldown;
			}
			set
			{
				if ((this._Spell3Cooldown != value))
				{
					this.OnSpell3CooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell3Cooldown = value;
					this.SendPropertyChanged("Spell3Cooldown");
					this.OnSpell3CooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell3CategoryID", DbType="Int")]
		public System.Nullable<int> Spell3CategoryID
		{
			get
			{
				return this._Spell3CategoryID;
			}
			set
			{
				if ((this._Spell3CategoryID != value))
				{
					this.OnSpell3CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._Spell3CategoryID = value;
					this.SendPropertyChanged("Spell3CategoryID");
					this.OnSpell3CategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell3CategoryCooldown", DbType="Int")]
		public System.Nullable<int> Spell3CategoryCooldown
		{
			get
			{
				return this._Spell3CategoryCooldown;
			}
			set
			{
				if ((this._Spell3CategoryCooldown != value))
				{
					this.OnSpell3CategoryCooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell3CategoryCooldown = value;
					this.SendPropertyChanged("Spell3CategoryCooldown");
					this.OnSpell3CategoryCooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell4ID", DbType="Int")]
		public System.Nullable<int> Spell4ID
		{
			get
			{
				return this._Spell4ID;
			}
			set
			{
				if ((this._Spell4ID != value))
				{
					this.OnSpell4IDChanging(value);
					this.SendPropertyChanging();
					this._Spell4ID = value;
					this.SendPropertyChanged("Spell4ID");
					this.OnSpell4IDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell4Charge", DbType="Int")]
		public System.Nullable<int> Spell4Charge
		{
			get
			{
				return this._Spell4Charge;
			}
			set
			{
				if ((this._Spell4Charge != value))
				{
					this.OnSpell4ChargeChanging(value);
					this.SendPropertyChanging();
					this._Spell4Charge = value;
					this.SendPropertyChanged("Spell4Charge");
					this.OnSpell4ChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Spell4Cooldown", DbType="Int")]
		public System.Nullable<int> Spell4Cooldown
		{
			get
			{
				return this._Spell4Cooldown;
			}
			set
			{
				if ((this._Spell4Cooldown != value))
				{
					this.OnSpell4CooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell4Cooldown = value;
					this.SendPropertyChanged("Spell4Cooldown");
					this.OnSpell4CooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell4CategoryID", DbType="Int")]
		public System.Nullable<int> Spell4CategoryID
		{
			get
			{
				return this._Spell4CategoryID;
			}
			set
			{
				if ((this._Spell4CategoryID != value))
				{
					this.OnSpell4CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._Spell4CategoryID = value;
					this.SendPropertyChanged("Spell4CategoryID");
					this.OnSpell4CategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell4CategoryCooldown", DbType="Int")]
		public System.Nullable<int> Spell4CategoryCooldown
		{
			get
			{
				return this._Spell4CategoryCooldown;
			}
			set
			{
				if ((this._Spell4CategoryCooldown != value))
				{
					this.OnSpell4CategoryCooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell4CategoryCooldown = value;
					this.SendPropertyChanged("Spell4CategoryCooldown");
					this.OnSpell4CategoryCooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell5ID", DbType="Int")]
		public System.Nullable<int> Spell5ID
		{
			get
			{
				return this._Spell5ID;
			}
			set
			{
				if ((this._Spell5ID != value))
				{
					this.OnSpell5IDChanging(value);
					this.SendPropertyChanging();
					this._Spell5ID = value;
					this.SendPropertyChanged("Spell5ID");
					this.OnSpell5IDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell5Charge", DbType="Int")]
		public System.Nullable<int> Spell5Charge
		{
			get
			{
				return this._Spell5Charge;
			}
			set
			{
				if ((this._Spell5Charge != value))
				{
					this.OnSpell5ChargeChanging(value);
					this.SendPropertyChanging();
					this._Spell5Charge = value;
					this.SendPropertyChanged("Spell5Charge");
					this.OnSpell5ChargeChanged();
				}
			}
		}
		
		[Column(Storage="_Spell5Cooldown", DbType="Int")]
		public System.Nullable<int> Spell5Cooldown
		{
			get
			{
				return this._Spell5Cooldown;
			}
			set
			{
				if ((this._Spell5Cooldown != value))
				{
					this.OnSpell5CooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell5Cooldown = value;
					this.SendPropertyChanged("Spell5Cooldown");
					this.OnSpell5CooldownChanged();
				}
			}
		}
		
		[Column(Storage="_Spell5CategoryID", DbType="Int")]
		public System.Nullable<int> Spell5CategoryID
		{
			get
			{
				return this._Spell5CategoryID;
			}
			set
			{
				if ((this._Spell5CategoryID != value))
				{
					this.OnSpell5CategoryIDChanging(value);
					this.SendPropertyChanging();
					this._Spell5CategoryID = value;
					this.SendPropertyChanged("Spell5CategoryID");
					this.OnSpell5CategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Spell5CategoryCooldown", DbType="Int")]
		public System.Nullable<int> Spell5CategoryCooldown
		{
			get
			{
				return this._Spell5CategoryCooldown;
			}
			set
			{
				if ((this._Spell5CategoryCooldown != value))
				{
					this.OnSpell5CategoryCooldownChanging(value);
					this.SendPropertyChanging();
					this._Spell5CategoryCooldown = value;
					this.SendPropertyChanged("Spell5CategoryCooldown");
					this.OnSpell5CategoryCooldownChanged();
				}
			}
		}
		
		[Column(Storage="_BondID", DbType="Int")]
		public System.Nullable<int> BondID
		{
			get
			{
				return this._BondID;
			}
			set
			{
				if ((this._BondID != value))
				{
					this.OnBondIDChanging(value);
					this.SendPropertyChanging();
					this._BondID = value;
					this.SendPropertyChanged("BondID");
					this.OnBondIDChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_BookTextID", DbType="Int")]
		public System.Nullable<int> BookTextID
		{
			get
			{
				return this._BookTextID;
			}
			set
			{
				if ((this._BookTextID != value))
				{
					this.OnBookTextIDChanging(value);
					this.SendPropertyChanging();
					this._BookTextID = value;
					this.SendPropertyChanged("BookTextID");
					this.OnBookTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookLngID", DbType="Int")]
		public System.Nullable<int> BookLngID
		{
			get
			{
				return this._BookLngID;
			}
			set
			{
				if ((this._BookLngID != value))
				{
					this.OnBookLngIDChanging(value);
					this.SendPropertyChanging();
					this._BookLngID = value;
					this.SendPropertyChanged("BookLngID");
					this.OnBookLngIDChanged();
				}
			}
		}
		
		[Column(Storage="_BookStationaryID", DbType="Int")]
		public System.Nullable<int> BookStationaryID
		{
			get
			{
				return this._BookStationaryID;
			}
			set
			{
				if ((this._BookStationaryID != value))
				{
					this.OnBookStationaryIDChanging(value);
					this.SendPropertyChanging();
					this._BookStationaryID = value;
					this.SendPropertyChanged("BookStationaryID");
					this.OnBookStationaryIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartQuestID", DbType="Int")]
		public System.Nullable<int> StartQuestID
		{
			get
			{
				return this._StartQuestID;
			}
			set
			{
				if ((this._StartQuestID != value))
				{
					this.OnStartQuestIDChanging(value);
					this.SendPropertyChanging();
					this._StartQuestID = value;
					this.SendPropertyChanged("StartQuestID");
					this.OnStartQuestIDChanged();
				}
			}
		}
		
		[Column(Storage="_LockPickMinLvl", DbType="Int")]
		public System.Nullable<int> LockPickMinLvl
		{
			get
			{
				return this._LockPickMinLvl;
			}
			set
			{
				if ((this._LockPickMinLvl != value))
				{
					this.OnLockPickMinLvlChanging(value);
					this.SendPropertyChanging();
					this._LockPickMinLvl = value;
					this.SendPropertyChanged("LockPickMinLvl");
					this.OnLockPickMinLvlChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialID", DbType="Int")]
		public System.Nullable<int> MaterialID
		{
			get
			{
				return this._MaterialID;
			}
			set
			{
				if ((this._MaterialID != value))
				{
					this.OnMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._MaterialID = value;
					this.SendPropertyChanged("MaterialID");
					this.OnMaterialIDChanged();
				}
			}
		}
		
		[Column(Storage="_SheathID", DbType="Int")]
		public System.Nullable<int> SheathID
		{
			get
			{
				return this._SheathID;
			}
			set
			{
				if ((this._SheathID != value))
				{
					this.OnSheathIDChanging(value);
					this.SendPropertyChanging();
					this._SheathID = value;
					this.SendPropertyChanged("SheathID");
					this.OnSheathIDChanged();
				}
			}
		}
		
		[Column(Storage="_RandProperty1ID", DbType="Int")]
		public System.Nullable<int> RandProperty1ID
		{
			get
			{
				return this._RandProperty1ID;
			}
			set
			{
				if ((this._RandProperty1ID != value))
				{
					this.OnRandProperty1IDChanging(value);
					this.SendPropertyChanging();
					this._RandProperty1ID = value;
					this.SendPropertyChanged("RandProperty1ID");
					this.OnRandProperty1IDChanged();
				}
			}
		}
		
		[Column(Storage="_RandProperty2ID", DbType="Int")]
		public System.Nullable<int> RandProperty2ID
		{
			get
			{
				return this._RandProperty2ID;
			}
			set
			{
				if ((this._RandProperty2ID != value))
				{
					this.OnRandProperty2IDChanging(value);
					this.SendPropertyChanging();
					this._RandProperty2ID = value;
					this.SendPropertyChanged("RandProperty2ID");
					this.OnRandProperty2IDChanged();
				}
			}
		}
		
		[Column(Storage="_Block", DbType="Int")]
		public System.Nullable<int> Block
		{
			get
			{
				return this._Block;
			}
			set
			{
				if ((this._Block != value))
				{
					this.OnBlockChanging(value);
					this.SendPropertyChanging();
					this._Block = value;
					this.SendPropertyChanged("Block");
					this.OnBlockChanged();
				}
			}
		}
		
		[Column(Storage="_ItemSetID", DbType="Int")]
		public System.Nullable<int> ItemSetID
		{
			get
			{
				return this._ItemSetID;
			}
			set
			{
				if ((this._ItemSetID != value))
				{
					this.OnItemSetIDChanging(value);
					this.SendPropertyChanging();
					this._ItemSetID = value;
					this.SendPropertyChanged("ItemSetID");
					this.OnItemSetIDChanged();
				}
			}
		}
		
		[Column(Storage="_DurationMax", DbType="Int")]
		public System.Nullable<int> DurationMax
		{
			get
			{
				return this._DurationMax;
			}
			set
			{
				if ((this._DurationMax != value))
				{
					this.OnDurationMaxChanging(value);
					this.SendPropertyChanging();
					this._DurationMax = value;
					this.SendPropertyChanged("DurationMax");
					this.OnDurationMaxChanged();
				}
			}
		}
		
		[Column(Storage="_ItemAreaID", DbType="Int")]
		public System.Nullable<int> ItemAreaID
		{
			get
			{
				return this._ItemAreaID;
			}
			set
			{
				if ((this._ItemAreaID != value))
				{
					this.OnItemAreaIDChanging(value);
					this.SendPropertyChanging();
					this._ItemAreaID = value;
					this.SendPropertyChanged("ItemAreaID");
					this.OnItemAreaIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemMapID", DbType="Int")]
		public System.Nullable<int> ItemMapID
		{
			get
			{
				return this._ItemMapID;
			}
			set
			{
				if ((this._ItemMapID != value))
				{
					this.OnItemMapIDChanging(value);
					this.SendPropertyChanging();
					this._ItemMapID = value;
					this.SendPropertyChanged("ItemMapID");
					this.OnItemMapIDChanged();
				}
			}
		}
		
		[Column(Storage="_BagFamilyID", DbType="Int")]
		public System.Nullable<int> BagFamilyID
		{
			get
			{
				return this._BagFamilyID;
			}
			set
			{
				if ((this._BagFamilyID != value))
				{
					this.OnBagFamilyIDChanging(value);
					this.SendPropertyChanging();
					this._BagFamilyID = value;
					this.SendPropertyChanged("BagFamilyID");
					this.OnBagFamilyIDChanged();
				}
			}
		}
		
		[Column(Storage="_TotemCatDbcID", DbType="Int")]
		public System.Nullable<int> TotemCatDbcID
		{
			get
			{
				return this._TotemCatDbcID;
			}
			set
			{
				if ((this._TotemCatDbcID != value))
				{
					this.OnTotemCatDbcIDChanging(value);
					this.SendPropertyChanging();
					this._TotemCatDbcID = value;
					this.SendPropertyChanged("TotemCatDbcID");
					this.OnTotemCatDbcIDChanged();
				}
			}
		}
		
		[Column(Storage="_Socket1ColorID", DbType="Int")]
		public System.Nullable<int> Socket1ColorID
		{
			get
			{
				return this._Socket1ColorID;
			}
			set
			{
				if ((this._Socket1ColorID != value))
				{
					this.OnSocket1ColorIDChanging(value);
					this.SendPropertyChanging();
					this._Socket1ColorID = value;
					this.SendPropertyChanged("Socket1ColorID");
					this.OnSocket1ColorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Socket1", DbType="Int")]
		public System.Nullable<int> Socket1
		{
			get
			{
				return this._Socket1;
			}
			set
			{
				if ((this._Socket1 != value))
				{
					this.OnSocket1Changing(value);
					this.SendPropertyChanging();
					this._Socket1 = value;
					this.SendPropertyChanged("Socket1");
					this.OnSocket1Changed();
				}
			}
		}
		
		[Column(Storage="_Socket2ColorID", DbType="Int")]
		public System.Nullable<int> Socket2ColorID
		{
			get
			{
				return this._Socket2ColorID;
			}
			set
			{
				if ((this._Socket2ColorID != value))
				{
					this.OnSocket2ColorIDChanging(value);
					this.SendPropertyChanging();
					this._Socket2ColorID = value;
					this.SendPropertyChanged("Socket2ColorID");
					this.OnSocket2ColorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Socket2", DbType="Int")]
		public System.Nullable<int> Socket2
		{
			get
			{
				return this._Socket2;
			}
			set
			{
				if ((this._Socket2 != value))
				{
					this.OnSocket2Changing(value);
					this.SendPropertyChanging();
					this._Socket2 = value;
					this.SendPropertyChanged("Socket2");
					this.OnSocket2Changed();
				}
			}
		}
		
		[Column(Storage="_Socket3ColorID", DbType="Int")]
		public System.Nullable<int> Socket3ColorID
		{
			get
			{
				return this._Socket3ColorID;
			}
			set
			{
				if ((this._Socket3ColorID != value))
				{
					this.OnSocket3ColorIDChanging(value);
					this.SendPropertyChanging();
					this._Socket3ColorID = value;
					this.SendPropertyChanged("Socket3ColorID");
					this.OnSocket3ColorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Socket3", DbType="Int")]
		public System.Nullable<int> Socket3
		{
			get
			{
				return this._Socket3;
			}
			set
			{
				if ((this._Socket3 != value))
				{
					this.OnSocket3Changing(value);
					this.SendPropertyChanging();
					this._Socket3 = value;
					this.SendPropertyChanged("Socket3");
					this.OnSocket3Changed();
				}
			}
		}
		
		[Column(Storage="_SpellItemEnchDbcID", DbType="Int")]
		public System.Nullable<int> SpellItemEnchDbcID
		{
			get
			{
				return this._SpellItemEnchDbcID;
			}
			set
			{
				if ((this._SpellItemEnchDbcID != value))
				{
					this.OnSpellItemEnchDbcIDChanging(value);
					this.SendPropertyChanging();
					this._SpellItemEnchDbcID = value;
					this.SendPropertyChanged("SpellItemEnchDbcID");
					this.OnSpellItemEnchDbcIDChanged();
				}
			}
		}
		
		[Column(Storage="_GemPropertiesDbcID", DbType="Int")]
		public System.Nullable<int> GemPropertiesDbcID
		{
			get
			{
				return this._GemPropertiesDbcID;
			}
			set
			{
				if ((this._GemPropertiesDbcID != value))
				{
					this.OnGemPropertiesDbcIDChanging(value);
					this.SendPropertyChanging();
					this._GemPropertiesDbcID = value;
					this.SendPropertyChanged("GemPropertiesDbcID");
					this.OnGemPropertiesDbcIDChanged();
				}
			}
		}
		
		[Column(Storage="_ExtCostID", DbType="Int")]
		public System.Nullable<int> ExtCostID
		{
			get
			{
				return this._ExtCostID;
			}
			set
			{
				if ((this._ExtCostID != value))
				{
					this.OnExtCostIDChanging(value);
					this.SendPropertyChanging();
					this._ExtCostID = value;
					this.SendPropertyChanged("ExtCostID");
					this.OnExtCostIDChanged();
				}
			}
		}
		
		[Column(Storage="_CondExtCostID", DbType="Int")]
		public System.Nullable<int> CondExtCostID
		{
			get
			{
				return this._CondExtCostID;
			}
			set
			{
				if ((this._CondExtCostID != value))
				{
					this.OnCondExtCostIDChanging(value);
					this.SendPropertyChanging();
					this._CondExtCostID = value;
					this.SendPropertyChanged("CondExtCostID");
					this.OnCondExtCostIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisenchantMinLvl", DbType="Int")]
		public System.Nullable<int> DisenchantMinLvl
		{
			get
			{
				return this._DisenchantMinLvl;
			}
			set
			{
				if ((this._DisenchantMinLvl != value))
				{
					this.OnDisenchantMinLvlChanging(value);
					this.SendPropertyChanging();
					this._DisenchantMinLvl = value;
					this.SendPropertyChanged("DisenchantMinLvl");
					this.OnDisenchantMinLvlChanged();
				}
			}
		}
		
		[Column(Storage="_ArmorDmgMod", DbType="Real")]
		public System.Nullable<float> ArmorDmgMod
		{
			get
			{
				return this._ArmorDmgMod;
			}
			set
			{
				if ((this._ArmorDmgMod != value))
				{
					this.OnArmorDmgModChanging(value);
					this.SendPropertyChanging();
					this._ArmorDmgMod = value;
					this.SendPropertyChanged("ArmorDmgMod");
					this.OnArmorDmgModChanged();
				}
			}
		}
		
		[Association(Name="DBItemTemplate_DBItem", Storage="_Items", OtherKey="ID")]
		public EntitySet<DBItem> DBItems
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(DBItem entity)
		{
			this.SendPropertyChanging();
			entity.DBItemTemplate = this;
		}
		
		private void detach_Items(DBItem entity)
		{
			this.SendPropertyChanging();
			entity.DBItemTemplate = null;
		}
	}
	
	[Table(Name="dbo.Characters")]
	public partial class DBCharacter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Guid;
		
		private long _AccountID;
		
		private string _Name;
		
		private EntitySet<DBCharacterInventory> _Inventory;
		
		private EntitySet<DBAuctionItem> _DBAuctionItems;
		
		private EntitySet<DBAuctionBid> _DBAuctionBids;
		
		private EntityRef<DBAccount> _DBAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuidChanging(long value);
    partial void OnGuidChanged();
    partial void OnAccountIDChanging(long value);
    partial void OnAccountIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DBCharacter()
		{
			this._Inventory = new EntitySet<DBCharacterInventory>(new Action<DBCharacterInventory>(this.attach_Inventory), new Action<DBCharacterInventory>(this.detach_Inventory));
			this._DBAuctionItems = new EntitySet<DBAuctionItem>(new Action<DBAuctionItem>(this.attach_DBAuctionItems), new Action<DBAuctionItem>(this.detach_DBAuctionItems));
			this._DBAuctionBids = new EntitySet<DBAuctionBid>(new Action<DBAuctionBid>(this.attach_DBAuctionBids), new Action<DBAuctionBid>(this.detach_DBAuctionBids));
			this._DBAccount = default(EntityRef<DBAccount>);
			OnCreated();
		}
		
		[Column(Storage="_Guid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[Column(Storage="_AccountID", DbType="BigInt NOT NULL")]
		public long AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._DBAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DBCharacter_DBCharacterInventory", Storage="_Inventory", OtherKey="ContainerGuid")]
		public EntitySet<DBCharacterInventory> Inventory
		{
			get
			{
				return this._Inventory;
			}
			set
			{
				this._Inventory.Assign(value);
			}
		}
		
		[Association(Name="DBCharacter_DBAuctionItem", Storage="_DBAuctionItems", OtherKey="OwnerGuid")]
		public EntitySet<DBAuctionItem> DBAuctionItems
		{
			get
			{
				return this._DBAuctionItems;
			}
			set
			{
				this._DBAuctionItems.Assign(value);
			}
		}
		
		[Association(Name="DBCharacter_DBAuctionBid", Storage="_DBAuctionBids", OtherKey="BidderGuid")]
		public EntitySet<DBAuctionBid> DBAuctionBids
		{
			get
			{
				return this._DBAuctionBids;
			}
			set
			{
				this._DBAuctionBids.Assign(value);
			}
		}
		
		[Association(Name="DBAccount_DBCharacter", Storage="_DBAccount", ThisKey="AccountID", IsForeignKey=true)]
		public DBAccount DBAccount
		{
			get
			{
				return this._DBAccount.Entity;
			}
			set
			{
				DBAccount previousValue = this._DBAccount.Entity;
				if (((previousValue != value) 
							|| (this._DBAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBAccount.Entity = null;
						previousValue.DBCharacters.Remove(this);
					}
					this._DBAccount.Entity = value;
					if ((value != null))
					{
						value.DBCharacters.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(long);
					}
					this.SendPropertyChanged("DBAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Inventory(DBCharacterInventory entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Inventory(DBCharacterInventory entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBCharacter = this;
		}
		
		private void detach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBCharacter = null;
		}
		
		private void attach_DBAuctionBids(DBAuctionBid entity)
		{
			this.SendPropertyChanging();
			entity.DBCharacter = this;
		}
		
		private void detach_DBAuctionBids(DBAuctionBid entity)
		{
			this.SendPropertyChanging();
			entity.DBCharacter = null;
		}
	}
	
	[Table(Name="dbo.ItemInventory")]
	public partial class DBItemInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ContainerGuid;
		
		private int _SlotID;
		
		private long _ItemGuid;
		
		private EntityRef<DBItem> _Container;
		
		private EntityRef<DBItem> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerGuidChanging(long value);
    partial void OnContainerGuidChanged();
    partial void OnSlotIDChanging(int value);
    partial void OnSlotIDChanged();
    partial void OnItemGuidChanging(long value);
    partial void OnItemGuidChanged();
    #endregion
		
		public DBItemInventory()
		{
			this._Container = default(EntityRef<DBItem>);
			this._Item = default(EntityRef<DBItem>);
			OnCreated();
		}
		
		[Column(Storage="_ContainerGuid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContainerGuid
		{
			get
			{
				return this._ContainerGuid;
			}
			set
			{
				if ((this._ContainerGuid != value))
				{
					if (this._Container.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainerGuidChanging(value);
					this.SendPropertyChanging();
					this._ContainerGuid = value;
					this.SendPropertyChanged("ContainerGuid");
					this.OnContainerGuidChanged();
				}
			}
		}
		
		[Column(Storage="_SlotID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SlotID
		{
			get
			{
				return this._SlotID;
			}
			set
			{
				if ((this._SlotID != value))
				{
					this.OnSlotIDChanging(value);
					this.SendPropertyChanging();
					this._SlotID = value;
					this.SendPropertyChanged("SlotID");
					this.OnSlotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemGuid", DbType="BigInt NOT NULL")]
		public long ItemGuid
		{
			get
			{
				return this._ItemGuid;
			}
			set
			{
				if ((this._ItemGuid != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemGuidChanging(value);
					this.SendPropertyChanging();
					this._ItemGuid = value;
					this.SendPropertyChanged("ItemGuid");
					this.OnItemGuidChanged();
				}
			}
		}
		
		[Association(Name="DBItem_DBItemInventory", Storage="_Container", ThisKey="ContainerGuid", IsForeignKey=true)]
		public DBItem Container
		{
			get
			{
				return this._Container.Entity;
			}
			set
			{
				DBItem previousValue = this._Container.Entity;
				if (((previousValue != value) 
							|| (this._Container.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Container.Entity = null;
						previousValue.Inventory.Remove(this);
					}
					this._Container.Entity = value;
					if ((value != null))
					{
						value.Inventory.Add(this);
						this._ContainerGuid = value.Guid;
					}
					else
					{
						this._ContainerGuid = default(long);
					}
					this.SendPropertyChanged("Container");
				}
			}
		}
		
		[Association(Name="DBItem_DBItemInventory1", Storage="_Item", ThisKey="ItemGuid", IsForeignKey=true)]
		public DBItem DBItem
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				DBItem previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Container = null;
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Container = this;
						this._ItemGuid = value.Guid;
					}
					else
					{
						this._ItemGuid = default(long);
					}
					this.SendPropertyChanged("DBItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CharacterInventory")]
	public partial class DBCharacterInventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ContainerGuid;
		
		private int _SlotID;
		
		private long _ItemGuid;
		
		private EntityRef<DBCharacter> _Owner;
		
		private EntityRef<DBItem> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerGuidChanging(long value);
    partial void OnContainerGuidChanged();
    partial void OnSlotIDChanging(int value);
    partial void OnSlotIDChanged();
    partial void OnItemGuidChanging(long value);
    partial void OnItemGuidChanged();
    #endregion
		
		public DBCharacterInventory()
		{
			this._Owner = default(EntityRef<DBCharacter>);
			this._Item = default(EntityRef<DBItem>);
			OnCreated();
		}
		
		[Column(Storage="_ContainerGuid", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ContainerGuid
		{
			get
			{
				return this._ContainerGuid;
			}
			set
			{
				if ((this._ContainerGuid != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainerGuidChanging(value);
					this.SendPropertyChanging();
					this._ContainerGuid = value;
					this.SendPropertyChanged("ContainerGuid");
					this.OnContainerGuidChanged();
				}
			}
		}
		
		[Column(Storage="_SlotID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SlotID
		{
			get
			{
				return this._SlotID;
			}
			set
			{
				if ((this._SlotID != value))
				{
					this.OnSlotIDChanging(value);
					this.SendPropertyChanging();
					this._SlotID = value;
					this.SendPropertyChanged("SlotID");
					this.OnSlotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemGuid", DbType="BigInt NOT NULL")]
		public long ItemGuid
		{
			get
			{
				return this._ItemGuid;
			}
			set
			{
				if ((this._ItemGuid != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemGuidChanging(value);
					this.SendPropertyChanging();
					this._ItemGuid = value;
					this.SendPropertyChanged("ItemGuid");
					this.OnItemGuidChanged();
				}
			}
		}
		
		[Association(Name="DBCharacter_DBCharacterInventory", Storage="_Owner", ThisKey="ContainerGuid", IsForeignKey=true)]
		public DBCharacter Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				DBCharacter previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Inventory.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Inventory.Add(this);
						this._ContainerGuid = value.Guid;
					}
					else
					{
						this._ContainerGuid = default(long);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[Association(Name="DBItem_DBCharacterInventory", Storage="_Item", ThisKey="ItemGuid", IsForeignKey=true)]
		public DBItem DBItem
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				DBItem previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Owner = null;
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Owner = this;
						this._ItemGuid = value.Guid;
					}
					else
					{
						this._ItemGuid = default(long);
					}
					this.SendPropertyChanged("DBItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Auctions")]
	public partial class DBAuctionHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<DBAuctionItem> _DBAuctionItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DBAuctionHouse()
		{
			this._DBAuctionItems = new EntitySet<DBAuctionItem>(new Action<DBAuctionItem>(this.attach_DBAuctionItems), new Action<DBAuctionItem>(this.detach_DBAuctionItems));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="DBAuctionHouse_DBAuctionItem", Storage="_DBAuctionItems", OtherKey="AuctionID")]
		public EntitySet<DBAuctionItem> DBAuctionItems
		{
			get
			{
				return this._DBAuctionItems;
			}
			set
			{
				this._DBAuctionItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBAuctionHouse = this;
		}
		
		private void detach_DBAuctionItems(DBAuctionItem entity)
		{
			this.SendPropertyChanging();
			entity.DBAuctionHouse = null;
		}
	}
	
	[Table(Name="dbo.AuctionItems")]
	public partial class DBAuctionItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AuctionID;
		
		private long _OwnerGuid;
		
		private long _BidderGuid;
		
		private long _ItemGuid;
		
		private int _Deposit;
		
		private int _StartPrice;
		
		private int _Price;
		
		private int _BuyOut;
		
		private System.DateTime _TimeStart;
		
		private System.DateTime _TimeEnd;
		
		private EntitySet<DBAuctionBid> _DBAuctionBids;
		
		private EntityRef<DBAuctionHouse> _DBAuctionHouse;
		
		private EntityRef<DBCharacter> _DBCharacter;
		
		private EntityRef<DBItem> _DBItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAuctionIDChanging(int value);
    partial void OnAuctionIDChanged();
    partial void OnOwnerGuidChanging(long value);
    partial void OnOwnerGuidChanged();
    partial void OnBidderGuidChanging(long value);
    partial void OnBidderGuidChanged();
    partial void OnItemGuidChanging(long value);
    partial void OnItemGuidChanged();
    partial void OnDepositChanging(int value);
    partial void OnDepositChanged();
    partial void OnStartPriceChanging(int value);
    partial void OnStartPriceChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnBuyOutChanging(int value);
    partial void OnBuyOutChanged();
    partial void OnTimeStartChanging(System.DateTime value);
    partial void OnTimeStartChanged();
    partial void OnTimeEndChanging(System.DateTime value);
    partial void OnTimeEndChanged();
    #endregion
		
		public DBAuctionItem()
		{
			this._DBAuctionBids = new EntitySet<DBAuctionBid>(new Action<DBAuctionBid>(this.attach_DBAuctionBids), new Action<DBAuctionBid>(this.detach_DBAuctionBids));
			this._DBAuctionHouse = default(EntityRef<DBAuctionHouse>);
			this._DBCharacter = default(EntityRef<DBCharacter>);
			this._DBItem = default(EntityRef<DBItem>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuctionID", DbType="Int NOT NULL")]
		public int AuctionID
		{
			get
			{
				return this._AuctionID;
			}
			set
			{
				if ((this._AuctionID != value))
				{
					if (this._DBAuctionHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuctionIDChanging(value);
					this.SendPropertyChanging();
					this._AuctionID = value;
					this.SendPropertyChanged("AuctionID");
					this.OnAuctionIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerGuid", DbType="BigInt NOT NULL")]
		public long OwnerGuid
		{
			get
			{
				return this._OwnerGuid;
			}
			set
			{
				if ((this._OwnerGuid != value))
				{
					if (this._DBCharacter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerGuidChanging(value);
					this.SendPropertyChanging();
					this._OwnerGuid = value;
					this.SendPropertyChanged("OwnerGuid");
					this.OnOwnerGuidChanged();
				}
			}
		}
		
		[Column(Storage="_BidderGuid", DbType="BigInt NOT NULL")]
		public long BidderGuid
		{
			get
			{
				return this._BidderGuid;
			}
			set
			{
				if ((this._BidderGuid != value))
				{
					this.OnBidderGuidChanging(value);
					this.SendPropertyChanging();
					this._BidderGuid = value;
					this.SendPropertyChanged("BidderGuid");
					this.OnBidderGuidChanged();
				}
			}
		}
		
		[Column(Storage="_ItemGuid", DbType="BigInt NOT NULL")]
		public long ItemGuid
		{
			get
			{
				return this._ItemGuid;
			}
			set
			{
				if ((this._ItemGuid != value))
				{
					if (this._DBItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemGuidChanging(value);
					this.SendPropertyChanging();
					this._ItemGuid = value;
					this.SendPropertyChanged("ItemGuid");
					this.OnItemGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Deposit", DbType="Int NOT NULL")]
		public int Deposit
		{
			get
			{
				return this._Deposit;
			}
			set
			{
				if ((this._Deposit != value))
				{
					this.OnDepositChanging(value);
					this.SendPropertyChanging();
					this._Deposit = value;
					this.SendPropertyChanged("Deposit");
					this.OnDepositChanged();
				}
			}
		}
		
		[Column(Storage="_StartPrice", DbType="Int NOT NULL")]
		public int StartPrice
		{
			get
			{
				return this._StartPrice;
			}
			set
			{
				if ((this._StartPrice != value))
				{
					this.OnStartPriceChanging(value);
					this.SendPropertyChanging();
					this._StartPrice = value;
					this.SendPropertyChanged("StartPrice");
					this.OnStartPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_BuyOut", DbType="Int NOT NULL")]
		public int BuyOut
		{
			get
			{
				return this._BuyOut;
			}
			set
			{
				if ((this._BuyOut != value))
				{
					this.OnBuyOutChanging(value);
					this.SendPropertyChanging();
					this._BuyOut = value;
					this.SendPropertyChanged("BuyOut");
					this.OnBuyOutChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStart", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStart
		{
			get
			{
				return this._TimeStart;
			}
			set
			{
				if ((this._TimeStart != value))
				{
					this.OnTimeStartChanging(value);
					this.SendPropertyChanging();
					this._TimeStart = value;
					this.SendPropertyChanged("TimeStart");
					this.OnTimeStartChanged();
				}
			}
		}
		
		[Column(Storage="_TimeEnd", DbType="DateTime NOT NULL")]
		public System.DateTime TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[Association(Name="DBAuctionItem_DBAuctionBid", Storage="_DBAuctionBids", OtherKey="AuctionItemID")]
		public EntitySet<DBAuctionBid> DBAuctionBids
		{
			get
			{
				return this._DBAuctionBids;
			}
			set
			{
				this._DBAuctionBids.Assign(value);
			}
		}
		
		[Association(Name="DBAuctionHouse_DBAuctionItem", Storage="_DBAuctionHouse", ThisKey="AuctionID", IsForeignKey=true)]
		public DBAuctionHouse DBAuctionHouse
		{
			get
			{
				return this._DBAuctionHouse.Entity;
			}
			set
			{
				DBAuctionHouse previousValue = this._DBAuctionHouse.Entity;
				if (((previousValue != value) 
							|| (this._DBAuctionHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBAuctionHouse.Entity = null;
						previousValue.DBAuctionItems.Remove(this);
					}
					this._DBAuctionHouse.Entity = value;
					if ((value != null))
					{
						value.DBAuctionItems.Add(this);
						this._AuctionID = value.ID;
					}
					else
					{
						this._AuctionID = default(int);
					}
					this.SendPropertyChanged("DBAuctionHouse");
				}
			}
		}
		
		[Association(Name="DBCharacter_DBAuctionItem", Storage="_DBCharacter", ThisKey="OwnerGuid", IsForeignKey=true)]
		public DBCharacter DBCharacter
		{
			get
			{
				return this._DBCharacter.Entity;
			}
			set
			{
				DBCharacter previousValue = this._DBCharacter.Entity;
				if (((previousValue != value) 
							|| (this._DBCharacter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBCharacter.Entity = null;
						previousValue.DBAuctionItems.Remove(this);
					}
					this._DBCharacter.Entity = value;
					if ((value != null))
					{
						value.DBAuctionItems.Add(this);
						this._OwnerGuid = value.Guid;
					}
					else
					{
						this._OwnerGuid = default(long);
					}
					this.SendPropertyChanged("DBCharacter");
				}
			}
		}
		
		[Association(Name="DBItem_DBAuctionItem", Storage="_DBItem", ThisKey="ItemGuid", IsForeignKey=true)]
		public DBItem DBItem
		{
			get
			{
				return this._DBItem.Entity;
			}
			set
			{
				DBItem previousValue = this._DBItem.Entity;
				if (((previousValue != value) 
							|| (this._DBItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBItem.Entity = null;
						previousValue.DBAuctionItems.Remove(this);
					}
					this._DBItem.Entity = value;
					if ((value != null))
					{
						value.DBAuctionItems.Add(this);
						this._ItemGuid = value.Guid;
					}
					else
					{
						this._ItemGuid = default(long);
					}
					this.SendPropertyChanged("DBItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DBAuctionBids(DBAuctionBid entity)
		{
			this.SendPropertyChanging();
			entity.DBAuctionItem = this;
		}
		
		private void detach_DBAuctionBids(DBAuctionBid entity)
		{
			this.SendPropertyChanging();
			entity.DBAuctionItem = null;
		}
	}
	
	[Table(Name="dbo.AuctionBids")]
	public partial class DBAuctionBid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AuctionItemID;
		
		private long _BidderGuid;
		
		private int _Amount;
		
		private EntityRef<DBAuctionItem> _DBAuctionItem;
		
		private EntityRef<DBCharacter> _DBCharacter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAuctionItemIDChanging(int value);
    partial void OnAuctionItemIDChanged();
    partial void OnBidderGuidChanging(long value);
    partial void OnBidderGuidChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public DBAuctionBid()
		{
			this._DBAuctionItem = default(EntityRef<DBAuctionItem>);
			this._DBCharacter = default(EntityRef<DBCharacter>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuctionItemID", DbType="Int NOT NULL")]
		public int AuctionItemID
		{
			get
			{
				return this._AuctionItemID;
			}
			set
			{
				if ((this._AuctionItemID != value))
				{
					if (this._DBAuctionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuctionItemIDChanging(value);
					this.SendPropertyChanging();
					this._AuctionItemID = value;
					this.SendPropertyChanged("AuctionItemID");
					this.OnAuctionItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_BidderGuid", DbType="BigInt NOT NULL")]
		public long BidderGuid
		{
			get
			{
				return this._BidderGuid;
			}
			set
			{
				if ((this._BidderGuid != value))
				{
					if (this._DBCharacter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBidderGuidChanging(value);
					this.SendPropertyChanging();
					this._BidderGuid = value;
					this.SendPropertyChanged("BidderGuid");
					this.OnBidderGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Association(Name="DBAuctionItem_DBAuctionBid", Storage="_DBAuctionItem", ThisKey="AuctionItemID", IsForeignKey=true)]
		public DBAuctionItem DBAuctionItem
		{
			get
			{
				return this._DBAuctionItem.Entity;
			}
			set
			{
				DBAuctionItem previousValue = this._DBAuctionItem.Entity;
				if (((previousValue != value) 
							|| (this._DBAuctionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBAuctionItem.Entity = null;
						previousValue.DBAuctionBids.Remove(this);
					}
					this._DBAuctionItem.Entity = value;
					if ((value != null))
					{
						value.DBAuctionBids.Add(this);
						this._AuctionItemID = value.ID;
					}
					else
					{
						this._AuctionItemID = default(int);
					}
					this.SendPropertyChanged("DBAuctionItem");
				}
			}
		}
		
		[Association(Name="DBCharacter_DBAuctionBid", Storage="_DBCharacter", ThisKey="BidderGuid", IsForeignKey=true)]
		public DBCharacter DBCharacter
		{
			get
			{
				return this._DBCharacter.Entity;
			}
			set
			{
				DBCharacter previousValue = this._DBCharacter.Entity;
				if (((previousValue != value) 
							|| (this._DBCharacter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBCharacter.Entity = null;
						previousValue.DBAuctionBids.Remove(this);
					}
					this._DBCharacter.Entity = value;
					if ((value != null))
					{
						value.DBAuctionBids.Add(this);
						this._BidderGuid = value.Guid;
					}
					else
					{
						this._BidderGuid = default(long);
					}
					this.SendPropertyChanged("DBCharacter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Accounts")]
	public partial class DBAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private int _Expansion;
		
		private byte[] _PasswordSalt;
		
		private byte[] _PasswordVerifier;
		
		private EntitySet<DBCharacter> _DBCharacters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExpansionChanging(int value);
    partial void OnExpansionChanged();
    partial void OnPasswordSaltChanging(byte[] value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordVerifierChanging(byte[] value);
    partial void OnPasswordVerifierChanged();
    #endregion
		
		public DBAccount()
		{
			this._DBCharacters = new EntitySet<DBCharacter>(new Action<DBCharacter>(this.attach_DBCharacters), new Action<DBCharacter>(this.detach_DBCharacters));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Expansion", DbType="Int NOT NULL")]
		public int Expansion
		{
			get
			{
				return this._Expansion;
			}
			set
			{
				if ((this._Expansion != value))
				{
					this.OnExpansionChanging(value);
					this.SendPropertyChanging();
					this._Expansion = value;
					this.SendPropertyChanged("Expansion");
					this.OnExpansionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="Binary(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordVerifier", DbType="Binary(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public byte[] PasswordVerifier
		{
			get
			{
				return this._PasswordVerifier;
			}
			set
			{
				if ((this._PasswordVerifier != value))
				{
					this.OnPasswordVerifierChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerifier = value;
					this.SendPropertyChanged("PasswordVerifier");
					this.OnPasswordVerifierChanged();
				}
			}
		}
		
		[Association(Name="DBAccount_DBCharacter", Storage="_DBCharacters", OtherKey="AccountID")]
		public EntitySet<DBCharacter> DBCharacters
		{
			get
			{
				return this._DBCharacters;
			}
			set
			{
				this._DBCharacters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DBCharacters(DBCharacter entity)
		{
			this.SendPropertyChanging();
			entity.DBAccount = this;
		}
		
		private void detach_DBCharacters(DBCharacter entity)
		{
			this.SendPropertyChanging();
			entity.DBAccount = null;
		}
	}
}
#pragma warning restore 1591
